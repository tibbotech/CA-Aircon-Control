'***********************************************************************************************************
'			Tibbit #29 (temperature sensor)
'***********************************************************************************************************

include "global.tbh"

'--------------------------------------------------------------------
const MCP9808_INIT_SIGNATURE=&hF083
const MCP9808_STAMP="MCP> "
const MCP9808_CR_LF=chr(13)+chr(10)

const MCP9808_DEFAULT_MFG_ID	=&h54
const MCP9808_DEFAULT_DEVID		=&h400

enum mcp9808_resolution
	'MCP9808_RESOLUSION_MODE_0=&h00 '0.5C (tCONV = 30 ms typical)
	MCP9808_RESOLUSION_MODE_1=&h01  '0.25C (tCONV = 65 ms typical)
	'MCP9808_RESOLUSION_MODE_2=&h02 '0.125C (tCONV = 130 ms typical)
	'MCP9808_RESOLUSION_MODE_3=&h03 '0.0625C (power-up default, tCONV = 250 ms typical)
end enum

const MCP9808_MANUF_WRITE_CODE=&h30
const MCP9808_MANUF_READ_CODE=&h31

enum mcp9808_reg
'	MCP9808_CONF=&h01,
'	MCP9808_TUP=&h02,
'	MCP9808_TLO=&h03,
'	MCP9808_TCRIT=&h04,
	MCP9808_TA=&h05,
	MCP9808_MFGID=&h06,
	MCP9808_IDREV=&h07,
	MCP9808_RESOL=&h08
end enum

'--------------------------------------------------------------------
declare function mcp9808_read_data(op as mcp9808_reg) as word
declare sub mcp9808_write_data(op as mcp9808_reg,data as word)
declare sub mcp9808_delay_msecond(value as word)

#if MCP_DEBUG_PRINT=1
	declare sub mcp_debug_print(data as string)
#endif

'--------------------------------------------------------------------
dim i2c_num_tbt29 as byte
dim mcp_init_flag as word

'==============================================================================
function tbt29_init(use_ssi as no_yes) as tbt29_errcheck
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return TBT29_NO_SSI_AVAILABLE, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
'Other error codes (TBT29_WRONG_MFGID and TBT29_WRONG_DEVID_REVISION) indicate failure.

	tbt29_init=TBT29_OK
	#if MCP_DEBUG_PRINT=1
		mcp_debug_print("++++++++++")
	#endif
	mcp_init_flag=MCP9808_INIT_SIGNATURE

	i2c_num_tbt29=si2c_register("TBT29", TBT29_DATA_PIN, TBT29_CLK_PIN,use_ssi)
	#if MCP_DEBUG_PRINT=1
		mcp_debug_print("i2c num:"+str(i2c_num_tbt29))
	#endif

	if i2c_num_tbt29 <4 then
		ssi.channel=i2c_num_tbt29
		ssi.enabled=NO
		ssi.baudrate=PL_SSI_BAUDRATES_400kHz
		ssi.clkmap=TBT29_CLK_PIN
		ssi.dimap=TBT29_DATA_PIN
		ssi.domap=TBT29_DATA_PIN
		ssi.direction=PL_SSI_DIRECTION_LEFT
		ssi.mode=PL_SSI_MODE_2
		ssi.zmode=PL_SSI_ZMODE_ENABLED_ON_ZERO
		ssi.enabled=YES
	else
		tbt29_init=TBT29_NO_SSI_AVAILABLE
	end if

	'check the MCP9808_DEFAULT_MFG_ID
	if mcp9808_read_data(MCP9808_MFGID)<>MCP9808_DEFAULT_MFG_ID then
		#if MCP_DEBUG_PRINT=1
			mcp_debug_print("MFG_ID ERROR")
		#endif 
		tbt29_init=TBT29_WRONG_MFGID
		goto leave
	end if

	'check the MCP9808_DEFAULT_DEVID+MCP9808_DEFAULT_REVISION
	if mcp9808_read_data(MCP9808_IDREV)<>MCP9808_DEFAULT_DEVID then
		#if MCP_DEBUG_PRINT=1
			mcp_debug_print("DEVICE ID & REVISION ERROR")
		#endif 
		tbt29_init=TBT29_WRONG_DEVID_REVISION
		goto leave
	end if

	'resolution :+0.25¢XC (tCONV = 65 ms typical)
	mcp9808_write_data(MCP9808_RESOL,MCP9808_RESOLUSION_MODE_1)
leave:
	#if MCP_DEBUG_PRINT=1
		mcp_debug_print("----------")
	#endif
end function

function tbt29_get_c() as real
'Returns the signed floating point value expressing the temperature in deg. C.
	tbt29_get_c=tbt29_get()
	tbt29_get_c=tbt29_get_c/4
end function


function tbt29_get() as integer
'Returns the signed integer value expressing the temperature in 0.25 deg. C steps.	
	
	const DELAY_IN_65_MS=130
	dim r as word
	dim t_integer as word
	dim t_fraction as byte
	
	if mcp_init_flag<>MCP9808_INIT_SIGNATURE then
	#if MCP_DEBUG_PRINT=1
		mcp_debug_print("The lib is not initialized, call tbt29_init() first")
	#endif
		exit function
	end if

	si2c_get(i2c_num_tbt29) 

	mcp9808_delay_msecond(DELAY_IN_65_MS)

	r=mcp9808_read_data(MCP9808_TA)

	#if MCP_DEBUG_PRINT=1
		mcp_debug_print("Raw temperature:"+hex(r))
	#endif

	if r and &h1000 then
		'temperature is negative
		t_integer=(r and &h0FFF)/16
		t_fraction=(r and &h000F)/4
		tbt29_get=1024-((t_integer*4)+t_fraction)
	else	
		'temperature is positive
		t_integer=(r and &h0FFF)/16
		t_fraction=(r and &h000F)/4
		tbt29_get=(t_integer*4)+t_fraction
	end if
end function

function mcp9808_read_data(op as mcp9808_reg) as word
	dim upper,lower as byte=0

	upper=0
	lower=0
	si2c_get(i2c_num_tbt29)
	si2c_start()

	'send address + op
	si2c_write(MCP9808_MANUF_WRITE_CODE)
	si2c_write(op)
	
	si2c_start()

	si2c_write(MCP9808_MANUF_READ_CODE)

	if op=MCP9808_RESOL then
		lower=si2c_read(true)
	else
		upper=si2c_read(true)
		lower=si2c_read(false)
	end if

	si2c_stop()
	mcp9808_read_data=upper*256+lower
end function

sub mcp9808_write_data(op as mcp9808_reg,data as word)
	dim value as byte
	si2c_get(i2c_num_tbt29) 
	si2c_start()

	si2c_write(MCP9808_MANUF_WRITE_CODE)
	si2c_write(op)

	if op=MCP9808_RESOL then
		value=data and &h00FF
		si2c_write(value)
	else
		value=(data and &hFF00)/256
		si2c_write(value)
		value=data and &h00FF
		si2c_write(value)		
	end if	
	si2c_stop()
end sub

sub mcp9808_delay_msecond(value as word)
	dim ax,bx as word

	for ax=0 to value
		for bx=0 to 10
		next bx
	next ax
end sub

#if MCP_DEBUG_PRINT=1
sub mcp_debug_print(data as string)
	sys.debugprint(MCP9808_STAMP+data+MCP9808_CR_LF)
end sub
#endif
